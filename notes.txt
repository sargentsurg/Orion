		// setup a GLSL program
		this.vertextShader = createShaderFromScriptElement(this.gl, "2d-vertex-shader");
		this.fragmentShader = createShaderFromScriptElement(this.gl, "2d-fragment-shader");
		this.program = createProgram(this.gl, [this.vertextShader, this.fragmentShader]);
		this.gl.useProgram(this.program);

		// look up where the vertex data needs to go.
		this.positionLocation = this.gl.getAttribLocation(this.program, "a_position");

		// set the resolution
		this.resolutionLocation = this.gl.getUniformLocation(this.program, "u_resolution");
		this.gl.uniform2f(this.resolutionLocation, this.canvas.width, this.canvas.height);

		// Create a buffer and put a single clipspace rectangle in
		// it (2 triangles)
		this.buffer = this.gl.createBuffer();
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([
			10, 20,
			80, 20,
			10, 30,
			10, 30,
			80, 20,
			80, 30]), this.gl.STATIC_DRAW);

		this.gl.enableVertexAttribArray(this.positionLocation);
		this.gl.vertexAttribPointer(this.positionLocation, 2, this.gl.FLOAT, false, 0, 0);

		this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);

	}

	Player.prototype.setRectangle = function(gl, x, y, width, height) {
	  var x1 = x;
	  var x2 = x + width;
	  var y1 = y;
	  var y2 = y + height;

	  this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([
	     x1, y1,
	     x2, y1,
	     x1, y2,
	     x1, y2,
	     x2, y1,
	     x2, y2]), this.gl.STATIC_DRAW);